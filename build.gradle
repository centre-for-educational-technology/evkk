buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
  }
}

import org.springframework.boot.gradle.tasks.bundling.BootJar

subprojects {

  apply plugin: "io.spring.dependency-management"
  apply plugin: "java"
  apply plugin: "idea"

  group = "ee.tlu"
  version = rootProject.version
  sourceCompatibility = "1.11"

  repositories {
    mavenCentral()
  }

  dependencyManagement {
    imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
  }

  dependencies {

    // mapstruct
    implementation "org.mapstruct:mapstruct:${mapStructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    //developmentOnly "org.springframework.boot:spring-boot-devtools"
    testImplementation project(":test")
  }

  tasks.withType(BootJar).configureEach {
    archiveFileName = "${project.name}.jar"
    destinationDirectory = file("${rootProject.projectDir}/dist/")
  }

  test {
    outputs.upToDateWhen { false }
    useJUnitPlatform()
    testLogging { showStandardStreams = true }
    reports.html.setDestination(file("${rootProject.projectDir}/reports/tests/${project.name}/"))
  }

}
