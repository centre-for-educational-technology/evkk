<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ee.tlu.evkk.dal.dao.TextDao">

  <select id="findTextById" resultType="java.lang.String">
    select content
    from core.text
    where id = #{textId}
  </select>

  <select id="findTextsByIds" resultType="java.lang.String">
    select string_agg(content, ' ')
    from core.text
    where id in
    <foreach item="id" collection="ids" separator=", " open="(" close=")">
      #{id}
    </foreach>
  </select>

  <select id="findTextMetadata" resultType="java.lang.String">
    select array_to_json(array_agg(row_to_json(t)))
    from (select property_name, property_value from core.text_property where text_id = #{textId}) t
  </select>

  <select id="findTextIdsByCorpusId" resultType="java.lang.String">
    select text_id
    from core.text_property
    where core.text_property.property_value = #{corpusId}
      and core.text_property.property_name = 'korpus';
  </select>

  <select id="findTextIdAndTitleByCorpusId" resultType="java.lang.String">
    select array_to_json(array_agg(row_to_json(t)))
    from (select tp1.text_id,
                 (select tp2.property_value
                  FROM core.text_property as tp2
                  where tp2.property_name = 'title'
                    and tp2.text_id = tp1.text_id)
          from core.text_property as tp1
          where tp1.property_value = #{corpusId}
            and tp1.property_name = 'korpus') t
  </select>

  <select id="uusparing" resultType="java.lang.String">
    SELECT array_agg(property_name || ': ' || property_value) AS properties
    FROM (SELECT text_id, 'text_id' AS property_name, text_id::varchar AS property_value
          FROM core.text_property GROUP BY text_id
          UNION SELECT text_id, property_name, property_value FROM core.text_property)
           AS tabel1 GROUP BY text_id;
  </select>

  <select id="detailedTextQueryByParameters" resultType="java.lang.String">
    select array_to_json(array_agg(row_to_json(t)))
    from (
    select p2.text_id, p2.property_value
    from core.text_property as p2
    <foreach item="multiParamHelper" collection="multiParamHelpers" separator=" ">
      <if test="multiParamHelper.values != null">
        join core.text_property as ${multiParamHelper.table} on p2.text_id = ${multiParamHelper.table}.text_id
      </if>
    </foreach>
    <foreach item="singleParamHelper" collection="singleParamHelpers" separator=" ">
      join core.text_property as ${singleParamHelper.table} on p2.text_id = ${singleParamHelper.table}.text_id
    </foreach>
    <foreach item="rangeParamHelper" collection="rangeParamHelpers" separator=" ">
      <if test="rangeParamHelper.castable == true">
        join core.text as ${rangeParamHelper.table} on p2.text_id = ${rangeParamHelper.table}.id
        join core.text_processor_result as ${rangeParamHelper.table + 1} on ${rangeParamHelper.table}.hash =
        ${rangeParamHelper.table + 1}.text_hash
      </if>
      <if test="rangeParamHelper.castable == false">
        join core.text_property as ${rangeParamHelper.table} on p2.text_id = ${rangeParamHelper.table}.text_id
      </if>
    </foreach>
    <if test="studyLevelAndDegreeHelper.firstValue != null or studyLevelAndDegreeHelper.secondValue != null">
      join core.text_property as ${studyLevelAndDegreeHelper.table} on p2.text_id =
      ${studyLevelAndDegreeHelper.table}.text_id
    </if>
    <if test="otherLangHelper.table != null">
      join core.text_property as ${otherLangHelper.table} on p2.text_id = ${otherLangHelper.table}.text_id
    </if>
    <if test="usedMultiMaterialsHelper.table != null">
      join core.text_property as ${usedMultiMaterialsHelper.table} on p2.text_id =
      ${usedMultiMaterialsHelper.table}.text_id
    </if>
    where p2.property_name = 'title'
    <choose>
      <when test="studyLevelAndDegreeHelper.firstValue != null and studyLevelAndDegreeHelper.secondValue != null">
        and ((${studyLevelAndDegreeHelper.table}.property_name = #{studyLevelAndDegreeHelper.firstParameter}
        and ${studyLevelAndDegreeHelper.table}.property_value = #{studyLevelAndDegreeHelper.firstValue})
        or (${studyLevelAndDegreeHelper.table}.property_name = #{studyLevelAndDegreeHelper.secondParameter}
        and ${studyLevelAndDegreeHelper.table}.property_value = #{studyLevelAndDegreeHelper.secondValue}))
      </when>
      <when test="studyLevelAndDegreeHelper.firstValue != null">
        and ${studyLevelAndDegreeHelper.table}.property_name = #{studyLevelAndDegreeHelper.firstParameter}
        and ${studyLevelAndDegreeHelper.table}.property_value = #{studyLevelAndDegreeHelper.firstValue}
      </when>
      <when test="studyLevelAndDegreeHelper.secondValue != null">
        and ${studyLevelAndDegreeHelper.table}.property_name = #{studyLevelAndDegreeHelper.secondParameter}
        and ${studyLevelAndDegreeHelper.table}.property_value = #{studyLevelAndDegreeHelper.secondValue}
      </when>
    </choose>
    <if test="otherLangHelper.table != null">
      <bind name="likeValue" value="'%' + otherLangHelper.value + '%'"/>
      and ${otherLangHelper.table}.property_name = #{otherLangHelper.parameter}
      and ${otherLangHelper.table}.property_value ilike #{likeValue}
    </if>
    <if test="usedMultiMaterialsHelper.table != null">
      and ${usedMultiMaterialsHelper.table}.property_name = #{usedMultiMaterialsHelper.parameter}
      and ${usedMultiMaterialsHelper.table}.property_value ilike any
      <foreach item="usedMultiMaterial" collection="usedMultiMaterialsHelper.values" separator=", " open="(array["
               close="])">
        concat('%', #{usedMultiMaterial}, '%')
      </foreach>
    </if>
    <foreach item="multiParamHelper" collection="multiParamHelpers" separator=" ">
      <if test="multiParamHelper.values != null">
        and ${multiParamHelper.table}.property_name = #{multiParamHelper.parameter}
        and ${multiParamHelper.table}.property_value in
        <foreach item="multiParam" collection="multiParamHelper.values" separator=", " open="(" close=")">
          #{multiParam}
        </foreach>
      </if>
    </foreach>
    <foreach item="singleParamHelper" collection="singleParamHelpers" separator=" ">
      and ${singleParamHelper.table}.property_name = #{singleParamHelper.parameter}
      and ${singleParamHelper.table}.property_value = #{singleParamHelper.value}
    </foreach>
    <foreach item="rangeParamHelper" collection="rangeParamHelpers" separator=" ">
      <if test="rangeParamHelper.castable == true">
        and ${rangeParamHelper.table + 1}.type = 'CHARS_WORDS_SENTENCES' and
        <foreach item="baseValues" collection="rangeParamHelper.values" separator=" or " open="(" close=")">
          (cast(cast(${rangeParamHelper.table + 1}.result::json->#{rangeParamHelper.parameter} as TEXT) as INTEGER)
          between #{baseValues.startValue} and #{baseValues.endValue})
        </foreach>
      </if>
      <if test="rangeParamHelper.castable == false">
        and ${rangeParamHelper.table}.property_name = #{rangeParamHelper.parameter} and
        <foreach item="baseValues" collection="rangeParamHelper.values" separator=" or " open="(" close=")">
          (${rangeParamHelper.table}.property_value::integer between #{baseValues.startValue} and
          #{baseValues.endValue})
        </foreach>
      </if>
    </foreach>
    ) t
  </select>

  <select id="findMiniStats" resultType="java.lang.String">
    select array_to_json(array_agg(row_to_json(t)))
    from (
    select distinct count(tp1.text_id) as sum,
    sum(tp2.property_value::integer) as sonu,
    sum(tp3.property_value::integer) as lauseid
    from core.text_property as tp1
    JOIN core.text_property as tp2 on tp1.text_id=tp2.text_id
    JOIN core.text_property as tp3 on tp2.text_id=tp3.text_id
    WHERE tp1.property_name = 'korpus' AND tp1.property_value IN <foreach item="cId" collection="cId" separator=","
                                                                          open="(" close=")">
    #{cId}
  </foreach> AND tp2.property_name = 'sonu' AND tp3.property_name = 'lauseid'
    ) t
  </select>

  <select id="findAvailableValues" resultType="java.lang.String">
    select array_to_json(array_agg(row_to_json(t)))
    from (
        select distinct tp1.property_value as value
        from core.text_property as tp1
        WHERE tp1.property_name = #{pName}
        ) t
    </select>

    <select id="findDetailedValueByPropertyName" resultType="java.lang.String">
       select array_to_json(array_agg(row_to_json(t)))
        from (
        select distinct tp2.property_name as type,
        tp2.property_value as value,
        count(tp2.text_id) as tekste,
        sum(tp3.property_value::integer) as sonu,
        sum(tp4.property_value::integer) as lauseid,
        sum(tp5.property_value::integer) as vigu,

        COUNT(tp5.text_id) * 100.0 / (SELECT distinct COUNT(text_id) FROM core.text_property WHERE property_name = 'korpus' AND property_value IN <foreach item="cId" collection="cId" separator="," open="(" close=")">
        #{cId}
    </foreach>) AS protsent
        from core.text_property as tp1
        JOIN core.text_property as tp2 on tp1.text_id=tp2.text_id
        JOIN core.text_property as tp3 on tp2.text_id=tp3.text_id
        JOIN core.text_property as tp4 on tp3.text_id=tp4.text_id
        JOIN core.text_property as tp5 on tp4.text_id=tp5.text_id

        <!-- multiple tables JOIN -->

        <!-- JOIN core.text_property as tp6 on tp5.text_id=tp6.text_id -->

        WHERE tp1.property_name = 'korpus' AND tp1.property_value IN <foreach item="cId" collection="cId" separator="," open="(" close=")">
        #{cId}
    </foreach> AND
         tp2.property_name = #{pName} AND tp2.property_value IN <foreach item="pValue" collection="pValue" separator="," open="(" close=")">
        #{pValue}
    </foreach> AND tp3.property_name = 'sonu' AND tp4.property_name = 'lauseid'
        AND tp5.property_name = 'vigu'

        <!-- multiple tables WHERE -->

        <!-- AND tp6.property_name = 'tekstityyp' AND tp6.property_value = 'essee' -->

        GROUP BY tp2.property_name, tp2.property_value
        ) t
    </select>

    <select id="findValueByPropertyName" resultType="java.lang.String">

        select array_to_json(array_agg(row_to_json(t)))
        from (
               select property_name, property_value from core.text_property
               WHERE property_value = #{cId}) t

    </select>

  <select id="findTextsByCorpusId" resultType="java.lang.String"> select content
                                                                  from core.text
                                                                  where core.text.id
                                                                          IN (SELECT text_id
                                                                              from core.text_property
                                                                              WHERE core.text_property.property_name = 'korpus'
                                                                                AND core.text_property.property_value = #{corpusId});
  </select>

  <select id="findTextContentsAndTitlesByIds" resultType="ee.tlu.evkk.dal.dto.CorpusDownloadResponseEntity">
    select t2.property_value as title, t1.content as contents from core.text as t1
    join core.text_property as t2 on t1.id = t2.text_id
    where t2.property_name = 'title' and
    t1.id in <foreach item="id" collection="ids" separator="," open="(" close=")">#{id}</foreach>;
  </select>

  <select id="findTextTitlesAndContentsWithStanzaTaggingByIds"
          resultType="ee.tlu.evkk.dal.dto.CorpusDownloadResponseEntity">
    select t2.property_value as title, t3.result ->> 'content' as contents from core.text_processor_result as t3
    join core.text as t1 on t1.hash = t3.text_hash
    join core.text_property as t2 on t2.text_id = t1.id
    where t2.property_name = 'title' and
    t3.type = #{type} and
    t1.id in <foreach item="id" collection="ids" separator="," open="(" close=")">#{id}</foreach>;
  </select>

  <select id="findById" resultType="ee.tlu.evkk.dal.dto.Text">
    select *
    from core.text t
    where t.id = #{id};
  </select>

  <select id="search" resultType="ee.tlu.evkk.dal.dto.Text">
    select *
    from core.text t
     where t.id in (
      select distinct text_id
      from core.text_property tp
      <where>
        <foreach collection="filters" index="key" item="value" open="" separator=" " close="">
          or (tp.property_name = #{key} and tp.property_value in (select unnest(#{value,typeHandler=org.apache.ibatis.type.ArrayTypeHandler})))
        </foreach>
      </where>
      group by text_id
      having count(text_id) = ${filters.size()}
    )
    and t.content is not null and t.content != '' -- todo: content needs cleaning up so we can remove t.content is not null and t.content != '' checks
    order by t.id asc
    limit #{limit} offset #{offset};
  </select>

  <select id="list" resultType="ee.tlu.evkk.dal.dto.Text">
    select *
    from core.text t
         -- todo: content needs cleaning up so we can remove t.content is not null and t.content != '' checks
    where t.content is not null
      and t.content != ''
    order by t.id asc
      limit #{limit}
    offset #{offset};
  </select>

  <insert id="insertAdding">
    insert into core.text_added (id, content)
    values (#{id}, #{content});
  </insert>

  <insert id="insertAddingProperty">
    insert into core.text_property_added (text_id, property_name, property_value)
    values (#{id}, #{pname}, #{pvalue});
  </insert>

</mapper>
