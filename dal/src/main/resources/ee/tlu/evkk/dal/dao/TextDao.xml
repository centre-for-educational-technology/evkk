<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ee.tlu.evkk.dal.dao.TextDao">

  <select id="findTextsByIds" resultType="java.lang.String">
    select string_agg(content, ' ' order by id)
    from core.text
    where id in
    <foreach item="id" collection="ids" separator=", " open="(" close=")">
      #{id}
    </foreach>
  </select>

  <select id="findAnalysedTextsByIds" resultType="java.lang.String">
    select string_agg(t.content, ' ' order by t.id)
    from core.text t
    left join core.text_processor_result tpr on t.hash = tpr.text_hash and tpr.type = 'STANZA_ANALYSIS'
    where t.id in
    <foreach item="id" collection="ids" separator=", " open="(" close=")">
      #{id}
    </foreach>
    and tpr.result is not null
    and tpr.result->>'content' != '';
  </select>

  <select id="findUnanalysedTextsByIds" resultType="java.lang.String">
    select string_agg(t.content, ' ' order by t.id)
    from core.text t
    left join core.text_processor_result tpr on t.hash = tpr.text_hash and tpr.type = 'STANZA_ANALYSIS'
    where t.id in
    <foreach item="id" collection="ids" separator=", " open="(" close=")">
      #{id}
    </foreach>
    and (tpr.result is null or tpr.result->>'content' = '');
  </select>

  <select id="findTextAndMetadataById" resultType="ee.tlu.evkk.dal.dto.TextAndMetadata">
    select array_to_json(array_agg(json_build_object('propertyName', p.property_name, 'propertyValue',
                                                     p.property_value))) as properties,
           t.content                                                     as text
    from (select property_name, property_value, text_id from core.text_property where text_id = #{textId}) p
           join core.text t on p.text_id = t.id
    group by t.content;
  </select>

  <select id="detailedTextQueryByParameters" resultType="java.lang.String">
    select array_to_json(array_agg(row_to_json(t)))
    from (
    select p2.text_id, p2.property_value
    from core.text_property as p2
    <foreach item="multiParamHelper" collection="multiParamHelpers" separator=" ">
      <if test="multiParamHelper.values != null">
        join core.text_property as ${multiParamHelper.table} on p2.text_id = ${multiParamHelper.table}.text_id
      </if>
    </foreach>
    <foreach item="singleParamHelper" collection="singleParamHelpers" separator=" ">
      join core.text_property as ${singleParamHelper.table} on p2.text_id = ${singleParamHelper.table}.text_id
    </foreach>
    <foreach item="rangeParamHelper" collection="rangeParamHelpers" separator=" ">
      join core.text as ${rangeParamHelper.table} on p2.text_id = ${rangeParamHelper.table}.id
      join core.text_processor_result as ${rangeParamHelper.table + 1} on ${rangeParamHelper.table}.hash =
      ${rangeParamHelper.table + 1}.text_hash
    </foreach>
    <if test="studyLevelAndDegreeHelper.firstValue != null or studyLevelAndDegreeHelper.secondValue != null">
      join core.text_property as ${studyLevelAndDegreeHelper.table} on p2.text_id =
      ${studyLevelAndDegreeHelper.table}.text_id
    </if>
    <if test="otherLangHelper.table != null">
      join core.text_property as ${otherLangHelper.table} on p2.text_id = ${otherLangHelper.table}.text_id
    </if>
    <if test="usedMultiMaterialsHelper.table != null">
      join core.text_property as ${usedMultiMaterialsHelper.table} on p2.text_id =
      ${usedMultiMaterialsHelper.table}.text_id
    </if>
    where p2.property_name = 'title'
    <choose>
      <when test="studyLevelAndDegreeHelper.firstValue != null and studyLevelAndDegreeHelper.secondValue != null">
        and ((${studyLevelAndDegreeHelper.table}.property_name = #{studyLevelAndDegreeHelper.firstParameter}
        and ${studyLevelAndDegreeHelper.table}.property_value = #{studyLevelAndDegreeHelper.firstValue})
        or (${studyLevelAndDegreeHelper.table}.property_name = #{studyLevelAndDegreeHelper.secondParameter}
        and ${studyLevelAndDegreeHelper.table}.property_value = #{studyLevelAndDegreeHelper.secondValue}))
      </when>
      <when test="studyLevelAndDegreeHelper.firstValue != null">
        and ${studyLevelAndDegreeHelper.table}.property_name = #{studyLevelAndDegreeHelper.firstParameter}
        and ${studyLevelAndDegreeHelper.table}.property_value = #{studyLevelAndDegreeHelper.firstValue}
      </when>
      <when test="studyLevelAndDegreeHelper.secondValue != null">
        and ${studyLevelAndDegreeHelper.table}.property_name = #{studyLevelAndDegreeHelper.secondParameter}
        and ${studyLevelAndDegreeHelper.table}.property_value = #{studyLevelAndDegreeHelper.secondValue}
      </when>
    </choose>
    <if test="otherLangHelper.table != null">
      <bind name="likeValue" value="'%' + otherLangHelper.value + '%'"/>
      and ${otherLangHelper.table}.property_name = #{otherLangHelper.parameter}
      and ${otherLangHelper.table}.property_value ilike #{likeValue}
    </if>
    <if test="usedMultiMaterialsHelper.table != null">
      and ${usedMultiMaterialsHelper.table}.property_name = #{usedMultiMaterialsHelper.parameter}
      and ${usedMultiMaterialsHelper.table}.property_value ilike any
      <foreach item="usedMultiMaterial" collection="usedMultiMaterialsHelper.values" separator=", " open="(array["
               close="])">
        concat('%', #{usedMultiMaterial}, '%')
      </foreach>
    </if>
    <foreach item="multiParamHelper" collection="multiParamHelpers" separator=" ">
      <if test="multiParamHelper.values != null">
        and ${multiParamHelper.table}.property_name = #{multiParamHelper.parameter}
        and ${multiParamHelper.table}.property_value in
        <foreach item="multiParam" collection="multiParamHelper.values" separator=", " open="(" close=")">
          #{multiParam}
        </foreach>
      </if>
    </foreach>
    <foreach item="singleParamHelper" collection="singleParamHelpers" separator=" ">
      and ${singleParamHelper.table}.property_name = #{singleParamHelper.parameter}
      and ${singleParamHelper.table}.property_value = #{singleParamHelper.value}
    </foreach>
    <foreach item="rangeParamHelper" collection="rangeParamHelpers" separator=" ">
      and ${rangeParamHelper.table + 1}.type = 'CHARS_WORDS_SENTENCES' and
      <foreach item="baseValues" collection="rangeParamHelper.values" separator=" or " open="(" close=")">
        (cast(cast(${rangeParamHelper.table + 1}.result::json->#{rangeParamHelper.parameter} as TEXT) as
        INTEGER)
        between #{baseValues.startValue} and #{baseValues.endValue})
      </foreach>
    </foreach>
    ) t
  </select>

  <select id="findTextContentsAndTitlesByIds" resultType="ee.tlu.evkk.dal.dto.CorpusDownloadResponseEntity">
    select t2.property_value as title, t1.content as contents from core.text as t1
    join core.text_property as t2 on t1.id = t2.text_id
    where t2.property_name = 'title' and
    t1.id in <foreach item="id" collection="ids" separator="," open="(" close=")">#{id}</foreach>;
  </select>

  <select id="findTextTitlesAndContentsWithStanzaTaggingByIds"
          resultType="ee.tlu.evkk.dal.dto.CorpusDownloadResponseEntity">
    select t2.property_value as title, t3.result ->> 'content' as contents from core.text_processor_result as t3
    join core.text as t1 on t1.hash = t3.text_hash
    join core.text_property as t2 on t2.text_id = t1.id
    where t2.property_name = 'title' and
    t3.type = #{type} and
    t1.id in <foreach item="id" collection="ids" separator="," open="(" close=")">#{id}</foreach>;
  </select>

  <select id="findById" resultType="ee.tlu.evkk.dal.dto.Text">
    select *
    from core.text t
    where t.id = #{id};
  </select>

  <insert id="insertAdding">
    insert into core.text_added (id, content)
    values (#{id}, #{content});
  </insert>

  <insert id="insertAddingProperty">
    insert into core.text_property_added (text_id, property_name, property_value)
    values (#{id}, #{pname}, #{pvalue});
  </insert>

</mapper>
